"Lesson_001 - What you will learn in this course", "Lesson_002 - Section overview", "Lesson_003 - VSCode Shortcuts, Extensions & Settings for Flutter development", "Lesson_004 - Join the Slack Channel", "Lesson_005 - Course Project on GitHub", "Lesson_006 - Download the Starter Project & pubspec.yaml overview", "Lesson_007 - eCommerce app overview", "Lesson_008 - Project structure & code walkthrough", "Lesson_009 - Exploring the codebase with the Widget Inspector (DevTools)", "Lesson_010 - UI Design Principles: Composition & Reusable Widget Classes", "Lesson_011 - Useful Widgets for Responsive Design", "Lesson_012 - App Localization", "Lesson_013 - Section Intro", "Lesson_014 - Limitations of Navigator 1.0", "Lesson_015 - GoRouter installation & initial setup with MaterialApp.router", "Lesson_016 - Routes, sub-routes and navigation", "Lesson_017 - GoRouterHelper Extension and pageBuilder", "Lesson_018 - Adding some additional routes", "Lesson_019 - Routing by path vs routing by name", "Lesson_020 - Routing with parameters", "Lesson_021 - GoRouter Error Handling", "Lesson_022 - Navigating with go vs push", "Lesson_023 - Adding the remaining routes", "Lesson_024 - How to pop a route with GoRouter", "Lesson_025 - Nested Navigation", "Lesson_026 - Wrap up + Exercise", "Lesson_027 - Section Intro", "Lesson_028 - Popular App Architectures: MVC, MVP, MVVM, Clean Architecture, Bloc", "Lesson_029 - Riverpod App Architecture with the Controller-Service-Repository Pattern", "Lesson_030 - Project Structure: Feature-first vs Layer-first", "Lesson_031 - The Repository Pattern and the Data Layer", "Lesson_032": "Implementing the "fake" products repository as a singleton", "Lesson_033 - Working with Future and Stream-based APIs", "Lesson_034 - Wrap Up", "Lesson_035 - Section Intro", "Lesson_036 - Introduction to Riverpod", "Lesson_037 - Riverpod installation and setup", "Lesson_038 - Creating our first provider", "Lesson_039 - Reading providers with ConsumerWidget and Consumer", "Lesson_040 - Working with FutureProvider, StreamProvider, and AsyncValue", "Lesson_041 - Testing AsyncValue by adding a delay", "Lesson_042 - The family modifier", "Lesson_043 - The autoDispose modifier + advanced data caching options with keepAlive() & Timer", "Lesson_044 - Creating a reusable AsyncValueWidget helper", "Lesson_045 - Wrap Up + Exercise", "Lesson_046 - Section intro", "Lesson_047 - Implementing a fake authentication repository", "Lesson_048 - Creating repositories using abstract classes (optional)", "Lesson_049 - Intro: a reactive in-memory store with RxDart", "Lesson_050 - Implementing the InMemoryStore with RxDart", "Lesson_051 - Using the InMemoryStore in the FakeAuthRepository", "Lesson_052 - Accessing the FakeAuthRepository with ref.read() in the AccountScreen", "Lesson_053 - Creating our first controller using StateNotifier", "Lesson_054 - Using the StateNotifier inside the AccountScreen widget", "Lesson_055 - Listening to provider state changes with ref.listen()", "Lesson_056 - Bug-fix for Navigator.pop", "Lesson_057 - The AsyncValue.guard method", "Lesson_058 - Adding an AsyncValue extension method", "Lesson_059 - Using the authStateChangesProvider in HomeAppBar", "Lesson_060 - Intro to the email & password sign-in screen", "Lesson_061 - How to generate immutable state classes in Dart (EmailPasswordSignInState)", "Lesson_062 - Using AsyncValue inside EmailPasswordSignInState", "Lesson_063 - Implementing the EmailPasswordSignInController", "Lesson_064 - Using the EmailPasswordSignInController in the widget class", "Lesson_065 - Bug fix + filtering state updates with select()", "Lesson_066 - GoRouter redirects", "Lesson_067 - GoRouter: the refreshListenable argument", "Lesson_068 - Fixing the checkout flows after changes to refreshListenable (advanced)", "Lesson_069 - Wrap Up + Exercise", "Lesson_070 - Section Intro", "Lesson_071 - Introduction to Automated Testing and the Testing Pyramid", "Lesson_072 - Getting started with automated testing", "Lesson_073 - Writing the first unit test + adding toString() and equality implementations", "Lesson_074 - Test matchers and working with methods that throw exceptions", "Lesson_075 - Fixing the getProduct() method and updating the unit tests", "Lesson_076 - Working with groups and testing Futures and Streams", "Lesson_077 - Adding an optional delay to the FakeProductsRepository", "Lesson_078 - How to generate a Flutter test coverage report in VSCode", "Lesson_079 - Testing the FakeAuthRepository (part 1)", "Lesson_080 - Testing the FakeAuthRepository (part 2) + advanced stream matchers", "Lesson_081 - Mocks vs Fakes + installing the mocktail package", "Lesson_082 - Testing the AccountScreenController (part 1) + AsyncValue subclasses", "Lesson_083 - Testing the AccountScreenController (part 2) + working with mocks", "Lesson_084 - Testing the AccountScreenController (part 3) + type matchers", "Lesson_085 - Testing with Stream Matchers and Predicates", "Lesson_086 - Testing lifecycle methods (setUp, tearDown, setUpAll, tearDownAll)", "Lesson_087 - Testing the EmailPasswordSignInController with Acceptance Criteria", "Lesson_088 - Testing the EmailPasswordSignInController (part 2)", "Lesson_089 - Tip: setting custom test timeouts per-file", "Lesson_090 - Adding a test workflow to automate testing with GitHub Actions", "Lesson_091 - Wrap up", "Lesson_092 - Section Intro", "Lesson_093 - Introduction to widget tests + starter project", "Lesson_094 - Writing our first widget test using pumpWidget()", "Lesson_095 - Working with WidgetTester and finder", "Lesson_096 - Robot testing", "Lesson_097 - How to find widgets by key", "Lesson_098 - Writing widget tests with mocks and provider overrides", "Lesson_099 - Writing widget tests with Future.delayed() and runAsync()", "Lesson_100 - Adding the email & password widget tests", "Lesson_101 - Adding the email & password widget tests (part 2)", "Lesson_102 - Test setup for the authentication flow + using pumpAndSettle()", "Lesson_103 - Fixing the RenderFlex overflow error", "Lesson_104 - Completing the authentication flow test", "Lesson_105 - Integration tests", "Lesson_106 - Golden image tests", "Lesson_107 - Running golden image tests with size variants", "Lesson_108 - How to deal with Golden Image tests failing on CI", "Lesson_109 - Wrap Up", "Lesson_110 - Section Intro", "Lesson_111 - Overview of the shopping cart feature + technical requirements", "Lesson_112 - App Architecture for the Shopping Cart Feature", "Lesson_113 - Starter project + Overview of the data and domain layers", "Lesson_114 - Local Data Persistence with Sembast: Initial Setup", "Lesson_115 - How to persist the shopping cart data with the SembastCartRepository", "Lesson_116 - Implementing the CartService class", "Lesson_117 - Updating the CartService class to read dependencies using Ref", "Lesson_118 - Writing unit tests using ProviderContainer", "Lesson_119 - Writing the unit tests the CartService class", "Lesson_120 - Implementing the AddToCartController", "Lesson_121 - Updating the AddToCartWidget", "Lesson_122 - Bug Fix: Adding autoDispose to the AddToCartController", "Lesson_123 - Showing the cart items in the ShoppingCartScreen + AutoDispose vs AlwaysAlive error when combining providers", "Lesson_124 - Implementing the ShoppingCartItemController", "Lesson_125 - Updating the EditOrRemoveItemWidget and ShoppingCartScreen widgets", "Lesson_126 - Calculating and showing the cart items count", "Lesson_127 - Calculating and showing the cart total price", "Lesson_128 - Limiting the available quantity when adding items to the shopping cart", "Lesson_129 - Implementing the CartSyncService with a listener", "Lesson_130 - Registering the CartSyncService with ProviderContainer when the app starts", "Lesson_131 - Implementing the logic inside the CartSyncService", "Lesson_132 - Implementing the logic inside the CartSyncService (part 2 - optional)", "Lesson_133 - Unit tests for the CartSyncService", "Lesson_134 - Unit-testing providers with dependencies using ProviderContainer", "Lesson_135 - Updated widget and integration tests", "Lesson_136 - Wrap up + exercise (implement a wish list feature)", "Lesson_137 - Section intro", "Lesson_138 - Starter project for the checkout flows", "Lesson_139 - Updating the CheckoutScreen with the PageController initialization logic", "Lesson_140 - Do we need a StateNotifier for the CheckoutScreen?", "Lesson_141 - Updating the PaymentPage", "Lesson_142 - Implementing the PaymentButtonController", "Lesson_143 - Wrap Up", "Lesson_144 - Section Intro", "Lesson_145 - Errors vs exceptions", "Lesson_146 - Starter project overview + defining custom exceptions with enums and subclasses", "Lesson_147 - Freezed Introduction and Installation", "Lesson_148 - Creating an AppException class with Freezed", "Lesson_149 - Updating the AsyncValueUI extension to handle AppException values", "Lesson_150 - Adding an AsyncErrorLogger using ProviderObserver", "Lesson_151 - Creating a reusable ErrorLogger to catch all exceptions", "Lesson_152 - Completing the error handling system", "Lesson_153 - Working with the Result type (Success and Error)", "Lesson_154 - Drawbacks of the Result type (and when not to use it)", "Lesson_155 - Wrap up", "Lesson_156 - Section Intro", "Lesson_157 - Starter project overview", "Lesson_158 - Overview of the LeaveReviewScreen", "Lesson_159 - Implementing a LeaveReviewController and submitting form data", "Lesson_160 - Testing the LeaveReviewForm and preventing an AssertionError", "Lesson_161 - Dismissing the LeaveReviewScreen programmatically on success using a callback", "Lesson_162 - How to prefill a form with data from a repository/backend", "Lesson_163 - Optimization: only submit the form if the data has changed", "Lesson_164 - Showing existing reviews in the ProductReviewsList", "Lesson_165 - Updating the LeaveReviewAction by reading read data from the userPurchaseProvider", "Lesson_166 - Calculating the average product ratings", "Lesson_167 - Updated tests & wrap up", "Lesson_168 - Section Intro", "Lesson_169 - Client-side vs server-side search", "Lesson_170 - Adding a search method to the FakeProductsRepository", "Lesson_171 - Implementing client-side search with StateProvider and FutureProvider", "Lesson_172 - Riverpod caching with autoDispose and cacheTime", "Lesson_173 - Debouncing and cancelling network requests", "Lesson_174 - Introduction to Riverpod 2.x", "Lesson_175 - Starter project and updated code walkthrough", "Lesson_176 - Installing the Riverpod Generator package", "Lesson_177 - Generating providers with the @riverpod syntax", "Lesson_178 - Migrating some more providers to Riverpod Generator + the keepAlive syntax", "Lesson_179 - Migrating the AccountScreenController from StateNotifier to AsyncNotifier", "Lesson_180 - Converting the AccountScreenController to use Riverpod Generator", "Lesson_181 - How to check if an AsyncNotifier is mounted", "Lesson_182 - How to write unit tests for AsyncNotifier subclasses", "Lesson_183 - Wrap Up", "Lesson_184 - Conclusion & Next Steps" 